// This file is generated by kconfig_compiler from okular.kcfg.
// All changes you do to this file will be lost.

#include "settings.h"

#include <kglobal.h>
#include <QtCore/QFile>

using namespace Okular;

namespace Okular {
class SettingsPrivate
{
  public:

    // Debugging Options
    bool debugDrawBoundaries;
    bool debugDrawAnnotationRect;

    // Dlg Accessibility
    QColor paperColor;
    bool highlightImages;
    bool highlightLinks;
    bool changeColors;
    int renderMode;
    QColor recolorForeground;
    QColor recolorBackground;
    uint bWThreshold;
    uint bWContrast;

    // Dlg Performance
    int memoryLevel;
    bool enableCompositing;
    bool enableThreading;
    int textAntialias;
    int graphicsAntialias;

    // Dlg Presentation
    bool slidesAdvance;
    uint slidesAdvanceTime;
    bool slidesLoop;
    QColor slidesBackgroundColor;
    int slidesTransition;
    int slidesCursor;
    bool slidesShowProgress;
    bool slidesShowSummary;
    QColor slidesPencilColor;
    bool slidesTransitionsEnabled;
    int slidesScreen;

    // General
    bool obeyDRM;
    bool chooseGenerators;
    bool showOSD;
    bool displayDocumentTitle;
    bool useKTTSD;
    bool watchFile;
    int externalEditor;
    QString externalEditorCommand;

    // Main View
    bool showLeftPanel;
    QList<int> splitterSizes;

    // Nav Panel
    bool currentPageOnly;
    bool groupByAuthor;
    bool groupByPage;
    bool filterBookmarks;
    bool syncThumbnailsViewport;
    bool tocPageColumn;
    bool sidebarShowText;
    uint sidebarIconSize;

    // PageView
    bool centerFirstPageInRow;
    int editToolBarPlacement;
    bool showScrollBars;
    uint viewColumns;
    uint viewRows;
    bool trimMargins;
    bool viewContinuous;
    uint viewMode;
    uint zoomMode;
    double zoomFactor;

    // Identity
    QString identityAuthor;

    // Search
    bool searchCaseSensitive;
    bool searchFromCurrentPage;

    // items
    KConfigSkeleton::ItemBool *itemDebugDrawBoundaries;
    KConfigSkeleton::ItemBool *itemDebugDrawAnnotationRect;
    KConfigSkeleton::ItemColor *itemPaperColor;
    KConfigSkeleton::ItemBool *itemHighlightImages;
    KConfigSkeleton::ItemBool *itemHighlightLinks;
    KConfigSkeleton::ItemBool *itemChangeColors;
    KConfigSkeleton::ItemEnum *itemRenderMode;
    KConfigSkeleton::ItemColor *itemRecolorForeground;
    KConfigSkeleton::ItemColor *itemRecolorBackground;
    KConfigSkeleton::ItemUInt *itemBWThreshold;
    KConfigSkeleton::ItemUInt *itemBWContrast;
    KConfigSkeleton::ItemEnum *itemMemoryLevel;
    KConfigSkeleton::ItemBool *itemEnableCompositing;
    KConfigSkeleton::ItemBool *itemEnableThreading;
    KConfigSkeleton::ItemEnum *itemTextAntialias;
    KConfigSkeleton::ItemEnum *itemGraphicsAntialias;
    KConfigSkeleton::ItemBool *itemSlidesAdvance;
    KConfigSkeleton::ItemUInt *itemSlidesAdvanceTime;
    KConfigSkeleton::ItemBool *itemSlidesLoop;
    KConfigSkeleton::ItemColor *itemSlidesBackgroundColor;
    KConfigSkeleton::ItemEnum *itemSlidesTransition;
    KConfigSkeleton::ItemEnum *itemSlidesCursor;
    KConfigSkeleton::ItemBool *itemSlidesShowProgress;
    KConfigSkeleton::ItemBool *itemSlidesShowSummary;
    KConfigSkeleton::ItemColor *itemSlidesPencilColor;
    KConfigSkeleton::ItemBool *itemSlidesTransitionsEnabled;
    KConfigSkeleton::ItemInt *itemSlidesScreen;
    KConfigSkeleton::ItemBool *itemObeyDRM;
    KConfigSkeleton::ItemBool *itemChooseGenerators;
    KConfigSkeleton::ItemBool *itemShowOSD;
    KConfigSkeleton::ItemBool *itemDisplayDocumentTitle;
    KConfigSkeleton::ItemBool *itemUseKTTSD;
    KConfigSkeleton::ItemBool *itemWatchFile;
    KConfigSkeleton::ItemEnum *itemExternalEditor;
    KConfigSkeleton::ItemString *itemExternalEditorCommand;
    KConfigSkeleton::ItemBool *itemShowLeftPanel;
    KConfigSkeleton::ItemIntList *itemSplitterSizes;
    KConfigSkeleton::ItemBool *itemCurrentPageOnly;
    KConfigSkeleton::ItemBool *itemGroupByAuthor;
    KConfigSkeleton::ItemBool *itemGroupByPage;
    KConfigSkeleton::ItemBool *itemFilterBookmarks;
    KConfigSkeleton::ItemBool *itemSyncThumbnailsViewport;
    KConfigSkeleton::ItemBool *itemTocPageColumn;
    KConfigSkeleton::ItemBool *itemSidebarShowText;
    KConfigSkeleton::ItemUInt *itemSidebarIconSize;
    KConfigSkeleton::ItemBool *itemCenterFirstPageInRow;
    KConfigSkeleton::ItemInt *itemEditToolBarPlacement;
    KConfigSkeleton::ItemBool *itemShowScrollBars;
    KConfigSkeleton::ItemUInt *itemViewColumns;
    KConfigSkeleton::ItemUInt *itemViewRows;
    KConfigSkeleton::ItemBool *itemTrimMargins;
    KConfigSkeleton::ItemBool *itemViewContinuous;
    KConfigSkeleton::ItemUInt *itemViewMode;
    KConfigSkeleton::ItemUInt *itemZoomMode;
    KConfigSkeleton::ItemDouble *itemZoomFactor;
    KConfigSkeleton::ItemString *itemIdentityAuthor;
    KConfigSkeleton::ItemBool *itemSearchCaseSensitive;
    KConfigSkeleton::ItemBool *itemSearchFromCurrentPage;
};

}

namespace Okular {
class SettingsHelper
{
  public:
    SettingsHelper() : q(0) {}
    ~SettingsHelper() { delete q; }
    Settings *q;
};
}
K_GLOBAL_STATIC(SettingsHelper, s_globalSettings)
Settings *Settings::self()
{
  if (!s_globalSettings->q) {
    new Settings;
    s_globalSettings->q->readConfig();
  }

  return s_globalSettings->q;
}

Settings::Settings(  )
  : KConfigSkeleton( QLatin1String( "okularpartrc" ) )
{
  d = new SettingsPrivate;
  Q_ASSERT(!s_globalSettings->q);
  s_globalSettings->q = this;
  setCurrentGroup( QLatin1String( "Debugging Options" ) );

  d->itemDebugDrawBoundaries = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "DebugDrawBoundaries" ), d->debugDrawBoundaries, false );
  addItem( d->itemDebugDrawBoundaries, QLatin1String( "DebugDrawBoundaries" ) );
  d->itemDebugDrawAnnotationRect = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "DebugDrawAnnotationRect" ), d->debugDrawAnnotationRect, false );
  addItem( d->itemDebugDrawAnnotationRect, QLatin1String( "DebugDrawAnnotationRect" ) );

  setCurrentGroup( QLatin1String( "Dlg Accessibility" ) );

  d->itemPaperColor = new KConfigSkeleton::ItemColor( currentGroup(), QLatin1String( "PaperColor" ), d->paperColor, Qt::white );
  addItem( d->itemPaperColor, QLatin1String( "PaperColor" ) );
  d->itemHighlightImages = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "HighlightImages" ), d->highlightImages, false );
  addItem( d->itemHighlightImages, QLatin1String( "HighlightImages" ) );
  d->itemHighlightLinks = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "HighlightLinks" ), d->highlightLinks, false );
  addItem( d->itemHighlightLinks, QLatin1String( "HighlightLinks" ) );
  d->itemChangeColors = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "ChangeColors" ), d->changeColors, false );
  addItem( d->itemChangeColors, QLatin1String( "ChangeColors" ) );
  QList<KConfigSkeleton::ItemEnum::Choice2> valuesRenderMode;
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Inverted");
    valuesRenderMode.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Paper");
    valuesRenderMode.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Recolor");
    valuesRenderMode.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("BlackWhite");
    valuesRenderMode.append( choice );
  }
  d->itemRenderMode = new KConfigSkeleton::ItemEnum( currentGroup(), QLatin1String( "RenderMode" ), d->renderMode, valuesRenderMode, EnumRenderMode::Inverted );
  addItem( d->itemRenderMode, QLatin1String( "RenderMode" ) );
  d->itemRecolorForeground = new KConfigSkeleton::ItemColor( currentGroup(), QLatin1String( "RecolorForeground" ), d->recolorForeground, 0x600000 );
  addItem( d->itemRecolorForeground, QLatin1String( "RecolorForeground" ) );
  d->itemRecolorBackground = new KConfigSkeleton::ItemColor( currentGroup(), QLatin1String( "RecolorBackground" ), d->recolorBackground, 0xF0F0F0 );
  addItem( d->itemRecolorBackground, QLatin1String( "RecolorBackground" ) );
  d->itemBWThreshold = new KConfigSkeleton::ItemUInt( currentGroup(), QLatin1String( "BWThreshold" ), d->bWThreshold, 127 );
  d->itemBWThreshold->setMinValue(2);
  d->itemBWThreshold->setMaxValue(253);
  addItem( d->itemBWThreshold, QLatin1String( "BWThreshold" ) );
  d->itemBWContrast = new KConfigSkeleton::ItemUInt( currentGroup(), QLatin1String( "BWContrast" ), d->bWContrast, 2 );
  d->itemBWContrast->setMinValue(2);
  d->itemBWContrast->setMaxValue(6);
  addItem( d->itemBWContrast, QLatin1String( "BWContrast" ) );

  setCurrentGroup( QLatin1String( "Dlg Performance" ) );

  QList<KConfigSkeleton::ItemEnum::Choice2> valuesMemoryLevel;
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Low");
    valuesMemoryLevel.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Normal");
    valuesMemoryLevel.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Aggressive");
    valuesMemoryLevel.append( choice );
  }
  d->itemMemoryLevel = new KConfigSkeleton::ItemEnum( currentGroup(), QLatin1String( "MemoryLevel" ), d->memoryLevel, valuesMemoryLevel, EnumMemoryLevel::Normal );
  addItem( d->itemMemoryLevel, QLatin1String( "MemoryLevel" ) );
  d->itemEnableCompositing = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "EnableCompositing" ), d->enableCompositing, true );
  addItem( d->itemEnableCompositing, QLatin1String( "EnableCompositing" ) );
  d->itemEnableThreading = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "EnableThreading" ), d->enableThreading, true );
  addItem( d->itemEnableThreading, QLatin1String( "EnableThreading" ) );
  QList<KConfigSkeleton::ItemEnum::Choice2> valuesTextAntialias;
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Enabled");
    valuesTextAntialias.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Disabled");
    valuesTextAntialias.append( choice );
  }
  d->itemTextAntialias = new KConfigSkeleton::ItemEnum( currentGroup(), QLatin1String( "TextAntialias" ), d->textAntialias, valuesTextAntialias, EnumTextAntialias::Enabled );
  addItem( d->itemTextAntialias, QLatin1String( "TextAntialias" ) );
  QList<KConfigSkeleton::ItemEnum::Choice2> valuesGraphicsAntialias;
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Enabled");
    valuesGraphicsAntialias.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Disabled");
    valuesGraphicsAntialias.append( choice );
  }
  d->itemGraphicsAntialias = new KConfigSkeleton::ItemEnum( currentGroup(), QLatin1String( "GraphicsAntialias" ), d->graphicsAntialias, valuesGraphicsAntialias, EnumGraphicsAntialias::Enabled );
  addItem( d->itemGraphicsAntialias, QLatin1String( "GraphicsAntialias" ) );

  setCurrentGroup( QLatin1String( "Dlg Presentation" ) );

  d->itemSlidesAdvance = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "SlidesAdvance" ), d->slidesAdvance, false );
  addItem( d->itemSlidesAdvance, QLatin1String( "SlidesAdvance" ) );
  d->itemSlidesAdvanceTime = new KConfigSkeleton::ItemUInt( currentGroup(), QLatin1String( "SlidesAdvanceTime" ), d->slidesAdvanceTime, 5 );
  d->itemSlidesAdvanceTime->setMinValue(1);
  d->itemSlidesAdvanceTime->setMaxValue(3600);
  addItem( d->itemSlidesAdvanceTime, QLatin1String( "SlidesAdvanceTime" ) );
  d->itemSlidesLoop = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "SlidesLoop" ), d->slidesLoop, false );
  addItem( d->itemSlidesLoop, QLatin1String( "SlidesLoop" ) );
  d->itemSlidesBackgroundColor = new KConfigSkeleton::ItemColor( currentGroup(), QLatin1String( "SlidesBackgroundColor" ), d->slidesBackgroundColor, Qt::black );
  addItem( d->itemSlidesBackgroundColor, QLatin1String( "SlidesBackgroundColor" ) );
  QList<KConfigSkeleton::ItemEnum::Choice2> valuesSlidesTransition;
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("BlindsHorizontal");
    valuesSlidesTransition.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("BlindsVertical");
    valuesSlidesTransition.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("BoxIn");
    valuesSlidesTransition.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("BoxOut");
    valuesSlidesTransition.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Dissolve");
    valuesSlidesTransition.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("GlitterDown");
    valuesSlidesTransition.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("GlitterRight");
    valuesSlidesTransition.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("GlitterRightDown");
    valuesSlidesTransition.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Random");
    valuesSlidesTransition.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Replace");
    valuesSlidesTransition.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("SplitHorizontalIn");
    valuesSlidesTransition.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("SplitHorizontalOut");
    valuesSlidesTransition.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("SplitVerticalIn");
    valuesSlidesTransition.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("SplitVerticalOut");
    valuesSlidesTransition.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("WipeDown");
    valuesSlidesTransition.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("WipeRight");
    valuesSlidesTransition.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("WipeLeft");
    valuesSlidesTransition.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("WipeUp");
    valuesSlidesTransition.append( choice );
  }
  d->itemSlidesTransition = new KConfigSkeleton::ItemEnum( currentGroup(), QLatin1String( "SlidesTransition" ), d->slidesTransition, valuesSlidesTransition, EnumSlidesTransition::Replace );
  addItem( d->itemSlidesTransition, QLatin1String( "SlidesTransition" ) );
  QList<KConfigSkeleton::ItemEnum::Choice2> valuesSlidesCursor;
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("HiddenDelay");
    valuesSlidesCursor.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Visible");
    valuesSlidesCursor.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Hidden");
    valuesSlidesCursor.append( choice );
  }
  d->itemSlidesCursor = new KConfigSkeleton::ItemEnum( currentGroup(), QLatin1String( "SlidesCursor" ), d->slidesCursor, valuesSlidesCursor, EnumSlidesCursor::HiddenDelay );
  addItem( d->itemSlidesCursor, QLatin1String( "SlidesCursor" ) );
  d->itemSlidesShowProgress = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "SlidesShowProgress" ), d->slidesShowProgress, true );
  addItem( d->itemSlidesShowProgress, QLatin1String( "SlidesShowProgress" ) );
  d->itemSlidesShowSummary = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "SlidesShowSummary" ), d->slidesShowSummary, false );
  addItem( d->itemSlidesShowSummary, QLatin1String( "SlidesShowSummary" ) );
  d->itemSlidesPencilColor = new KConfigSkeleton::ItemColor( currentGroup(), QLatin1String( "SlidesPencilColor" ), d->slidesPencilColor, Qt::red );
  addItem( d->itemSlidesPencilColor, QLatin1String( "SlidesPencilColor" ) );
  d->itemSlidesTransitionsEnabled = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "SlidesTransitionsEnabled" ), d->slidesTransitionsEnabled, true );
  addItem( d->itemSlidesTransitionsEnabled, QLatin1String( "SlidesTransitionsEnabled" ) );
  d->itemSlidesScreen = new KConfigSkeleton::ItemInt( currentGroup(), QLatin1String( "SlidesScreen" ), d->slidesScreen, -2 );
  d->itemSlidesScreen->setMinValue(-2);
  d->itemSlidesScreen->setMaxValue(20);
  addItem( d->itemSlidesScreen, QLatin1String( "SlidesScreen" ) );

  setCurrentGroup( QLatin1String( "General" ) );

  d->itemObeyDRM = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "ObeyDRM" ), d->obeyDRM, true );
  addItem( d->itemObeyDRM, QLatin1String( "ObeyDRM" ) );
  d->itemChooseGenerators = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "ChooseGenerators" ), d->chooseGenerators, false );
  addItem( d->itemChooseGenerators, QLatin1String( "ChooseGenerators" ) );
  d->itemShowOSD = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "ShowOSD" ), d->showOSD, true );
  addItem( d->itemShowOSD, QLatin1String( "ShowOSD" ) );
  d->itemDisplayDocumentTitle = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "DisplayDocumentTitle" ), d->displayDocumentTitle, true );
  addItem( d->itemDisplayDocumentTitle, QLatin1String( "DisplayDocumentTitle" ) );
  d->itemUseKTTSD = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "UseKTTSD" ), d->useKTTSD );
  addItem( d->itemUseKTTSD, QLatin1String( "UseKTTSD" ) );
  d->itemWatchFile = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "WatchFile" ), d->watchFile, true );
  addItem( d->itemWatchFile, QLatin1String( "WatchFile" ) );
  QList<KConfigSkeleton::ItemEnum::Choice2> valuesExternalEditor;
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Custom");
    valuesExternalEditor.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Kate");
    valuesExternalEditor.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Kile");
    valuesExternalEditor.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Scite");
    valuesExternalEditor.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Emacsclient");
    valuesExternalEditor.append( choice );
  }
  d->itemExternalEditor = new KConfigSkeleton::ItemEnum( currentGroup(), QLatin1String( "ExternalEditor" ), d->externalEditor, valuesExternalEditor, EnumExternalEditor::Kate );
  addItem( d->itemExternalEditor, QLatin1String( "ExternalEditor" ) );
  d->itemExternalEditorCommand = new KConfigSkeleton::ItemString( currentGroup(), QLatin1String( "ExternalEditorCommand" ), d->externalEditorCommand, QLatin1String( "kate --use --line %l --column %c" ) );
  addItem( d->itemExternalEditorCommand, QLatin1String( "ExternalEditorCommand" ) );

  setCurrentGroup( QLatin1String( "Main View" ) );

  d->itemShowLeftPanel = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "ShowLeftPanel" ), d->showLeftPanel, true );
  addItem( d->itemShowLeftPanel, QLatin1String( "ShowLeftPanel" ) );
  QList<int> defaultSplitterSizes;

  d->itemSplitterSizes = new KConfigSkeleton::ItemIntList( currentGroup(), QLatin1String( "SplitterSizes" ), d->splitterSizes, defaultSplitterSizes );
  addItem( d->itemSplitterSizes, QLatin1String( "SplitterSizes" ) );

  setCurrentGroup( QLatin1String( "Nav Panel" ) );

  d->itemCurrentPageOnly = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "CurrentPageOnly" ), d->currentPageOnly, false );
  addItem( d->itemCurrentPageOnly, QLatin1String( "CurrentPageOnly" ) );
  d->itemGroupByAuthor = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "GroupByAuthor" ), d->groupByAuthor, true );
  addItem( d->itemGroupByAuthor, QLatin1String( "GroupByAuthor" ) );
  d->itemGroupByPage = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "GroupByPage" ), d->groupByPage, true );
  addItem( d->itemGroupByPage, QLatin1String( "GroupByPage" ) );
  d->itemFilterBookmarks = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "FilterBookmarks" ), d->filterBookmarks, false );
  addItem( d->itemFilterBookmarks, QLatin1String( "FilterBookmarks" ) );
  d->itemSyncThumbnailsViewport = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "SyncThumbnailsViewport" ), d->syncThumbnailsViewport, true );
  addItem( d->itemSyncThumbnailsViewport, QLatin1String( "SyncThumbnailsViewport" ) );
  d->itemTocPageColumn = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "TocPageColumn" ), d->tocPageColumn, true );
  addItem( d->itemTocPageColumn, QLatin1String( "TocPageColumn" ) );
  d->itemSidebarShowText = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "SidebarShowText" ), d->sidebarShowText, true );
  addItem( d->itemSidebarShowText, QLatin1String( "SidebarShowText" ) );
  d->itemSidebarIconSize = new KConfigSkeleton::ItemUInt( currentGroup(), QLatin1String( "SidebarIconSize" ), d->sidebarIconSize, 48 );
  addItem( d->itemSidebarIconSize, QLatin1String( "SidebarIconSize" ) );

  setCurrentGroup( QLatin1String( "PageView" ) );

  d->itemCenterFirstPageInRow = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "CenterFirstPageInRow" ), d->centerFirstPageInRow, false );
  addItem( d->itemCenterFirstPageInRow, QLatin1String( "CenterFirstPageInRow" ) );
  d->itemEditToolBarPlacement = new KConfigSkeleton::ItemInt( currentGroup(), QLatin1String( "EditToolBarPlacement" ), d->editToolBarPlacement, 0 );
  addItem( d->itemEditToolBarPlacement, QLatin1String( "EditToolBarPlacement" ) );
  d->itemShowScrollBars = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "ShowScrollBars" ), d->showScrollBars, true );
  addItem( d->itemShowScrollBars, QLatin1String( "ShowScrollBars" ) );
  d->itemViewColumns = new KConfigSkeleton::ItemUInt( currentGroup(), QLatin1String( "ViewColumns" ), d->viewColumns, 3 );
  d->itemViewColumns->setMinValue(1);
  d->itemViewColumns->setMaxValue(8);
  addItem( d->itemViewColumns, QLatin1String( "ViewColumns" ) );
  d->itemViewRows = new KConfigSkeleton::ItemUInt( currentGroup(), QLatin1String( "ViewRows" ), d->viewRows, 1 );
  d->itemViewRows->setMinValue(1);
  d->itemViewRows->setMaxValue(5);
  addItem( d->itemViewRows, QLatin1String( "ViewRows" ) );
  d->itemTrimMargins = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "TrimMargins" ), d->trimMargins, false );
  addItem( d->itemTrimMargins, QLatin1String( "TrimMargins" ) );
  d->itemViewContinuous = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "ViewContinuous" ), d->viewContinuous, true );
  addItem( d->itemViewContinuous, QLatin1String( "ViewContinuous" ) );
  d->itemViewMode = new KConfigSkeleton::ItemUInt( currentGroup(), QLatin1String( "ViewMode" ), d->viewMode, 0 );
  d->itemViewMode->setMaxValue(2);
  addItem( d->itemViewMode, QLatin1String( "ViewMode" ) );
  d->itemZoomMode = new KConfigSkeleton::ItemUInt( currentGroup(), QLatin1String( "ZoomMode" ), d->zoomMode, 2 );
  d->itemZoomMode->setMaxValue(2);
  addItem( d->itemZoomMode, QLatin1String( "ZoomMode" ) );
  d->itemZoomFactor = new KConfigSkeleton::ItemDouble( currentGroup(), QLatin1String( "ZoomFactor" ), d->zoomFactor, 1.0 );
  d->itemZoomFactor->setMinValue(0.1);
  d->itemZoomFactor->setMaxValue(4.0);
  addItem( d->itemZoomFactor, QLatin1String( "ZoomFactor" ) );

  setCurrentGroup( QLatin1String( "Identity" ) );


      KUser currentUser;
      QString userString = currentUser.property( KUser::FullName ).toString();
      if ( userString.isEmpty() )
      {
        userString = currentUser.loginName();
      }
    
  d->itemIdentityAuthor = new KConfigSkeleton::ItemString( currentGroup(), QLatin1String( "IdentityAuthor" ), d->identityAuthor, userString );
  addItem( d->itemIdentityAuthor, QLatin1String( "IdentityAuthor" ) );

  setCurrentGroup( QLatin1String( "Search" ) );

  d->itemSearchCaseSensitive = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "SearchCaseSensitive" ), d->searchCaseSensitive, false );
  addItem( d->itemSearchCaseSensitive, QLatin1String( "SearchCaseSensitive" ) );
  d->itemSearchFromCurrentPage = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "SearchFromCurrentPage" ), d->searchFromCurrentPage, false );
  addItem( d->itemSearchFromCurrentPage, QLatin1String( "SearchFromCurrentPage" ) );
}

void Settings::setDebugDrawBoundaries( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "DebugDrawBoundaries" ) ))
        self()->d->debugDrawBoundaries = v;
}

bool Settings::debugDrawBoundaries()
{
  return self()->d->debugDrawBoundaries;
}


void Settings::setDebugDrawAnnotationRect( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "DebugDrawAnnotationRect" ) ))
        self()->d->debugDrawAnnotationRect = v;
}

bool Settings::debugDrawAnnotationRect()
{
  return self()->d->debugDrawAnnotationRect;
}


void Settings::setPaperColor( const QColor & v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "PaperColor" ) ))
        self()->d->paperColor = v;
}

QColor Settings::paperColor()
{
  return self()->d->paperColor;
}


void Settings::setHighlightImages( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "HighlightImages" ) ))
        self()->d->highlightImages = v;
}

bool Settings::highlightImages()
{
  return self()->d->highlightImages;
}


void Settings::setHighlightLinks( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "HighlightLinks" ) ))
        self()->d->highlightLinks = v;
}

bool Settings::highlightLinks()
{
  return self()->d->highlightLinks;
}


void Settings::setChangeColors( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "ChangeColors" ) ))
        self()->d->changeColors = v;
}

bool Settings::changeColors()
{
  return self()->d->changeColors;
}


void Settings::setRenderMode( int v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "RenderMode" ) ))
        self()->d->renderMode = v;
}

int Settings::renderMode()
{
  return self()->d->renderMode;
}


void Settings::setRecolorForeground( const QColor & v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "RecolorForeground" ) ))
        self()->d->recolorForeground = v;
}

QColor Settings::recolorForeground()
{
  return self()->d->recolorForeground;
}


void Settings::setRecolorBackground( const QColor & v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "RecolorBackground" ) ))
        self()->d->recolorBackground = v;
}

QColor Settings::recolorBackground()
{
  return self()->d->recolorBackground;
}


void Settings::setBWThreshold( uint v ){
      if (v < 2)
      {
        kDebug() << "setBWThreshold: value " << v << " is less than the minimum value of 2" << endl;
        v = 2;
      }

      if (v > 253)
      {
        kDebug() << "setBWThreshold: value " << v << " is greater than the maximum value of 253" << endl;
        v = 253;
      }

      if (!self()->isImmutable( QString::fromLatin1 ( "BWThreshold" ) ))
        self()->d->bWThreshold = v;
}

uint Settings::bWThreshold()
{
  return self()->d->bWThreshold;
}


void Settings::setBWContrast( uint v ){
      if (v < 2)
      {
        kDebug() << "setBWContrast: value " << v << " is less than the minimum value of 2" << endl;
        v = 2;
      }

      if (v > 6)
      {
        kDebug() << "setBWContrast: value " << v << " is greater than the maximum value of 6" << endl;
        v = 6;
      }

      if (!self()->isImmutable( QString::fromLatin1 ( "BWContrast" ) ))
        self()->d->bWContrast = v;
}

uint Settings::bWContrast()
{
  return self()->d->bWContrast;
}


void Settings::setMemoryLevel( int v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "MemoryLevel" ) ))
        self()->d->memoryLevel = v;
}

int Settings::memoryLevel()
{
  return self()->d->memoryLevel;
}


void Settings::setEnableCompositing( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "EnableCompositing" ) ))
        self()->d->enableCompositing = v;
}

bool Settings::enableCompositing()
{
  return self()->d->enableCompositing;
}


void Settings::setEnableThreading( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "EnableThreading" ) ))
        self()->d->enableThreading = v;
}

bool Settings::enableThreading()
{
  return self()->d->enableThreading;
}


void Settings::setTextAntialias( int v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "TextAntialias" ) ))
        self()->d->textAntialias = v;
}

int Settings::textAntialias()
{
  return self()->d->textAntialias;
}


void Settings::setGraphicsAntialias( int v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "GraphicsAntialias" ) ))
        self()->d->graphicsAntialias = v;
}

int Settings::graphicsAntialias()
{
  return self()->d->graphicsAntialias;
}


void Settings::setSlidesAdvance( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "SlidesAdvance" ) ))
        self()->d->slidesAdvance = v;
}

bool Settings::slidesAdvance()
{
  return self()->d->slidesAdvance;
}


void Settings::setSlidesAdvanceTime( uint v ){
      if (v < 1)
      {
        kDebug() << "setSlidesAdvanceTime: value " << v << " is less than the minimum value of 1" << endl;
        v = 1;
      }

      if (v > 3600)
      {
        kDebug() << "setSlidesAdvanceTime: value " << v << " is greater than the maximum value of 3600" << endl;
        v = 3600;
      }

      if (!self()->isImmutable( QString::fromLatin1 ( "SlidesAdvanceTime" ) ))
        self()->d->slidesAdvanceTime = v;
}

uint Settings::slidesAdvanceTime()
{
  return self()->d->slidesAdvanceTime;
}


void Settings::setSlidesLoop( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "SlidesLoop" ) ))
        self()->d->slidesLoop = v;
}

bool Settings::slidesLoop()
{
  return self()->d->slidesLoop;
}


void Settings::setSlidesBackgroundColor( const QColor & v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "SlidesBackgroundColor" ) ))
        self()->d->slidesBackgroundColor = v;
}

QColor Settings::slidesBackgroundColor()
{
  return self()->d->slidesBackgroundColor;
}


void Settings::setSlidesTransition( int v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "SlidesTransition" ) ))
        self()->d->slidesTransition = v;
}

int Settings::slidesTransition()
{
  return self()->d->slidesTransition;
}


void Settings::setSlidesCursor( int v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "SlidesCursor" ) ))
        self()->d->slidesCursor = v;
}

int Settings::slidesCursor()
{
  return self()->d->slidesCursor;
}


void Settings::setSlidesShowProgress( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "SlidesShowProgress" ) ))
        self()->d->slidesShowProgress = v;
}

bool Settings::slidesShowProgress()
{
  return self()->d->slidesShowProgress;
}


void Settings::setSlidesShowSummary( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "SlidesShowSummary" ) ))
        self()->d->slidesShowSummary = v;
}

bool Settings::slidesShowSummary()
{
  return self()->d->slidesShowSummary;
}


void Settings::setSlidesPencilColor( const QColor & v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "SlidesPencilColor" ) ))
        self()->d->slidesPencilColor = v;
}

QColor Settings::slidesPencilColor()
{
  return self()->d->slidesPencilColor;
}


void Settings::setSlidesTransitionsEnabled( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "SlidesTransitionsEnabled" ) ))
        self()->d->slidesTransitionsEnabled = v;
}

bool Settings::slidesTransitionsEnabled()
{
  return self()->d->slidesTransitionsEnabled;
}


void Settings::setSlidesScreen( int v ){
      if (v < -2)
      {
        kDebug() << "setSlidesScreen: value " << v << " is less than the minimum value of -2" << endl;
        v = -2;
      }

      if (v > 20)
      {
        kDebug() << "setSlidesScreen: value " << v << " is greater than the maximum value of 20" << endl;
        v = 20;
      }

      if (!self()->isImmutable( QString::fromLatin1 ( "SlidesScreen" ) ))
        self()->d->slidesScreen = v;
}

int Settings::slidesScreen()
{
  return self()->d->slidesScreen;
}


void Settings::setObeyDRM( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "ObeyDRM" ) ))
        self()->d->obeyDRM = v;
}

bool Settings::obeyDRM()
{
  return self()->d->obeyDRM;
}


void Settings::setChooseGenerators( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "ChooseGenerators" ) ))
        self()->d->chooseGenerators = v;
}

bool Settings::chooseGenerators()
{
  return self()->d->chooseGenerators;
}


void Settings::setShowOSD( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "ShowOSD" ) ))
        self()->d->showOSD = v;
}

bool Settings::showOSD()
{
  return self()->d->showOSD;
}


void Settings::setDisplayDocumentTitle( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "DisplayDocumentTitle" ) ))
        self()->d->displayDocumentTitle = v;
}

bool Settings::displayDocumentTitle()
{
  return self()->d->displayDocumentTitle;
}


void Settings::setUseKTTSD( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "UseKTTSD" ) ))
        self()->d->useKTTSD = v;
}

bool Settings::useKTTSD()
{
  return self()->d->useKTTSD;
}


void Settings::setWatchFile( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "WatchFile" ) ))
        self()->d->watchFile = v;
}

bool Settings::watchFile()
{
  return self()->d->watchFile;
}


void Settings::setExternalEditor( int v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "ExternalEditor" ) ))
        self()->d->externalEditor = v;
}

int Settings::externalEditor()
{
  return self()->d->externalEditor;
}


void Settings::setExternalEditorCommand( const QString & v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "ExternalEditorCommand" ) ))
        self()->d->externalEditorCommand = v;
}

QString Settings::externalEditorCommand()
{
  return self()->d->externalEditorCommand;
}


void Settings::setShowLeftPanel( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "ShowLeftPanel" ) ))
        self()->d->showLeftPanel = v;
}

bool Settings::showLeftPanel()
{
  return self()->d->showLeftPanel;
}


void Settings::setSplitterSizes( const QList<int> & v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "SplitterSizes" ) ))
        self()->d->splitterSizes = v;
}

QList<int> Settings::splitterSizes()
{
  return self()->d->splitterSizes;
}


void Settings::setCurrentPageOnly( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "CurrentPageOnly" ) ))
        self()->d->currentPageOnly = v;
}

bool Settings::currentPageOnly()
{
  return self()->d->currentPageOnly;
}


void Settings::setGroupByAuthor( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "GroupByAuthor" ) ))
        self()->d->groupByAuthor = v;
}

bool Settings::groupByAuthor()
{
  return self()->d->groupByAuthor;
}


void Settings::setGroupByPage( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "GroupByPage" ) ))
        self()->d->groupByPage = v;
}

bool Settings::groupByPage()
{
  return self()->d->groupByPage;
}


void Settings::setFilterBookmarks( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "FilterBookmarks" ) ))
        self()->d->filterBookmarks = v;
}

bool Settings::filterBookmarks()
{
  return self()->d->filterBookmarks;
}


void Settings::setSyncThumbnailsViewport( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "SyncThumbnailsViewport" ) ))
        self()->d->syncThumbnailsViewport = v;
}

bool Settings::syncThumbnailsViewport()
{
  return self()->d->syncThumbnailsViewport;
}


void Settings::setTocPageColumn( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "TocPageColumn" ) ))
        self()->d->tocPageColumn = v;
}

bool Settings::tocPageColumn()
{
  return self()->d->tocPageColumn;
}


void Settings::setSidebarShowText( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "SidebarShowText" ) ))
        self()->d->sidebarShowText = v;
}

bool Settings::sidebarShowText()
{
  return self()->d->sidebarShowText;
}


void Settings::setSidebarIconSize( uint v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "SidebarIconSize" ) ))
        self()->d->sidebarIconSize = v;
}

uint Settings::sidebarIconSize()
{
  return self()->d->sidebarIconSize;
}


void Settings::setCenterFirstPageInRow( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "CenterFirstPageInRow" ) ))
        self()->d->centerFirstPageInRow = v;
}

bool Settings::centerFirstPageInRow()
{
  return self()->d->centerFirstPageInRow;
}


void Settings::setEditToolBarPlacement( int v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "EditToolBarPlacement" ) ))
        self()->d->editToolBarPlacement = v;
}

int Settings::editToolBarPlacement()
{
  return self()->d->editToolBarPlacement;
}


void Settings::setShowScrollBars( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "ShowScrollBars" ) ))
        self()->d->showScrollBars = v;
}

bool Settings::showScrollBars()
{
  return self()->d->showScrollBars;
}


void Settings::setViewColumns( uint v ){
      if (v < 1)
      {
        kDebug() << "setViewColumns: value " << v << " is less than the minimum value of 1" << endl;
        v = 1;
      }

      if (v > 8)
      {
        kDebug() << "setViewColumns: value " << v << " is greater than the maximum value of 8" << endl;
        v = 8;
      }

      if (!self()->isImmutable( QString::fromLatin1 ( "ViewColumns" ) ))
        self()->d->viewColumns = v;
}

uint Settings::viewColumns()
{
  return self()->d->viewColumns;
}


void Settings::setViewRows( uint v ){
      if (v < 1)
      {
        kDebug() << "setViewRows: value " << v << " is less than the minimum value of 1" << endl;
        v = 1;
      }

      if (v > 5)
      {
        kDebug() << "setViewRows: value " << v << " is greater than the maximum value of 5" << endl;
        v = 5;
      }

      if (!self()->isImmutable( QString::fromLatin1 ( "ViewRows" ) ))
        self()->d->viewRows = v;
}

uint Settings::viewRows()
{
  return self()->d->viewRows;
}


void Settings::setTrimMargins( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "TrimMargins" ) ))
        self()->d->trimMargins = v;
}

bool Settings::trimMargins()
{
  return self()->d->trimMargins;
}


void Settings::setViewContinuous( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "ViewContinuous" ) ))
        self()->d->viewContinuous = v;
}

bool Settings::viewContinuous()
{
  return self()->d->viewContinuous;
}


void Settings::setViewMode( uint v ){

      if (v > 2)
      {
        kDebug() << "setViewMode: value " << v << " is greater than the maximum value of 2" << endl;
        v = 2;
      }

      if (!self()->isImmutable( QString::fromLatin1 ( "ViewMode" ) ))
        self()->d->viewMode = v;
}

uint Settings::viewMode()
{
  return self()->d->viewMode;
}


void Settings::setZoomMode( uint v ){

      if (v > 2)
      {
        kDebug() << "setZoomMode: value " << v << " is greater than the maximum value of 2" << endl;
        v = 2;
      }

      if (!self()->isImmutable( QString::fromLatin1 ( "ZoomMode" ) ))
        self()->d->zoomMode = v;
}

uint Settings::zoomMode()
{
  return self()->d->zoomMode;
}


void Settings::setZoomFactor( double v ){
      if (v < 0.1)
      {
        kDebug() << "setZoomFactor: value " << v << " is less than the minimum value of 0.1" << endl;
        v = 0.1;
      }

      if (v > 4.0)
      {
        kDebug() << "setZoomFactor: value " << v << " is greater than the maximum value of 4.0" << endl;
        v = 4.0;
      }

      if (!self()->isImmutable( QString::fromLatin1 ( "ZoomFactor" ) ))
        self()->d->zoomFactor = v;
}

double Settings::zoomFactor()
{
  return self()->d->zoomFactor;
}


void Settings::setIdentityAuthor( const QString & v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "IdentityAuthor" ) ))
        self()->d->identityAuthor = v;
}

QString Settings::identityAuthor()
{
  return self()->d->identityAuthor;
}


void Settings::setSearchCaseSensitive( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "SearchCaseSensitive" ) ))
        self()->d->searchCaseSensitive = v;
}

bool Settings::searchCaseSensitive()
{
  return self()->d->searchCaseSensitive;
}


void Settings::setSearchFromCurrentPage( bool v ){
      if (!self()->isImmutable( QString::fromLatin1 ( "SearchFromCurrentPage" ) ))
        self()->d->searchFromCurrentPage = v;
}

bool Settings::searchFromCurrentPage()
{
  return self()->d->searchFromCurrentPage;
}


Settings::~Settings()
{
  delete d;
  if (!s_globalSettings.isDestroyed()) {
    s_globalSettings->q = 0;
  }
}

